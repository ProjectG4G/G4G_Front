{"ast":null,"code":"var _jsxFileName = \"/Users/sabrina_/Documents/prog/G4G-project/g4g/src/pages/Reset.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ResetView } from '../components/ResetEmail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Reset() {\n  _s();\n  const {\n    language\n  } = useSelector(state => state.general);\n  let dispatch = useDispatch();\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit,\n    watch,\n    getValues\n  } = useForm({\n    mode: \"onChange\"\n  });\n  function handleFormSubmit(data) {\n    console.log(data);\n  }\n  const emailProps = register(\"email\", {\n    required: \"поле обязательно к заполнению\",\n    pattern: {\n      value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: \"напишите правильный email\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ResetView, {\n    onFormSubmit: handleSubmit(handleFormSubmit),\n    emailProps: emailProps,\n    errors: errors,\n    isValid: isValid,\n    language: language\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(Reset, \"1FCMBlpBs1RSt7qMUtwNWEPyJ6s=\", false, function () {\n  return [useSelector, useDispatch, useForm];\n});\n_c = Reset;\nvar _c;\n$RefreshReg$(_c, \"Reset\");","map":{"version":3,"names":["useState","useForm","useDispatch","useSelector","ResetView","Reset","language","state","general","dispatch","register","formState","errors","isValid","handleSubmit","watch","getValues","mode","handleFormSubmit","data","console","log","emailProps","required","pattern","value","message"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g/src/pages/Reset.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ResetView } from '../components/ResetEmail';\n\nexport function Reset() {\n    const { language } = useSelector(state => state.general);\n    let dispatch = useDispatch();\n    const {\n        register,\n        formState: { errors, isValid },\n        handleSubmit,\n        watch,\n        getValues,\n    } = useForm({mode: \"onChange\"});\n    \n\n    function handleFormSubmit(data) {\n        console.log(data);\n        \n    }\n\n    const emailProps = register(\"email\", {\n        required: \"поле обязательно к заполнению\",\n        pattern: {\n            value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: \"напишите правильный email\",\n        }\n    });\n\n   \n\n\n    return (\n        <ResetView \n            onFormSubmit={handleSubmit(handleFormSubmit)}\n            emailProps={emailProps}\n            errors={errors}\n            isValid={isValid}\n            language={language}/>\n            \n    );\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,QAAQ,0BAA0B;AAAC;AAErD,OAAO,SAASC,KAAK,GAAG;EAAA;EACpB,MAAM;IAAEC;EAAS,CAAC,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;EACxD,IAAIC,QAAQ,GAAGP,WAAW,EAAE;EAC5B,MAAM;IACFQ,QAAQ;IACRC,SAAS,EAAE;MAAEC,MAAM;MAAEC;IAAQ,CAAC;IAC9BC,YAAY;IACZC,KAAK;IACLC;EACJ,CAAC,GAAGf,OAAO,CAAC;IAACgB,IAAI,EAAE;EAAU,CAAC,CAAC;EAG/B,SAASC,gBAAgB,CAACC,IAAI,EAAE;IAC5BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAErB;EAEA,MAAMG,UAAU,GAAGZ,QAAQ,CAAC,OAAO,EAAE;IACjCa,QAAQ,EAAE,+BAA+B;IACzCC,OAAO,EAAE;MACLC,KAAK,EAAE,sJAAsJ;MAC7JC,OAAO,EAAE;IACb;EACJ,CAAC,CAAC;EAKF,oBACI,QAAC,SAAS;IACN,YAAY,EAAEZ,YAAY,CAACI,gBAAgB,CAAE;IAC7C,UAAU,EAAEI,UAAW;IACvB,MAAM,EAAEV,MAAO;IACf,OAAO,EAAEC,OAAQ;IACjB,QAAQ,EAAEP;EAAS;IAAA;IAAA;IAAA;EAAA,QAAE;AAGjC;AAAC,GArCeD,KAAK;EAAA,QACIF,WAAW,EACjBD,WAAW,EAOtBD,OAAO;AAAA;AAAA,KATCI,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}