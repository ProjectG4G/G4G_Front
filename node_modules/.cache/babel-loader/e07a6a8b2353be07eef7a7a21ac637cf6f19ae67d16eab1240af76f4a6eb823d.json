{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = 'http://34.159.231.164/api/';\nexport const API = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const PublicApi = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst refreshToken = async () => {\n  // Make an API call to refresh the token\n  const response = await API.post('auth/refresh', {\n    refreshToken: localStorage.getItem('refresh')\n  });\n\n  // Update the token and refreshToken in local storage\n  localStorage.setItem('token', response.data.token);\n  localStorage.setItem('refresh', response.data.refresh);\n\n  // Update the authorization header for subsequent requests\n  API.defaults.headers.common['Authorization'] = 'Bearer ' + response.data.token;\n\n  // Return the refreshed token\n  return response.data.token;\n};\nAPI.interceptors.request.use(req => {\n  req.headers['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n  return req;\n});\nAPI.interceptors.request.use(async req => {\n  req.headers['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n  return req;\n}, async error => {\n  // Check if the error response has a status code of 403 (Unauthorized)\n  if (error.response && error.response.status === 403) {\n    try {\n      // Call the refreshToken function to refresh the token\n      const token = await refreshToken();\n      // Update the authorization header with the refreshed token\n      error.config.headers['Authorization'] = 'Bearer ' + token;\n      // Retry the original request\n      return axios.request(error.config);\n    } catch (refreshError) {\n      // If the refreshToken function fails, you can handle the error here\n      // For example, you can redirect to a login page or show an error message\n      throw refreshError;\n    }\n  }\n  // If the error is not a 403 error, you can handle it as usual\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","baseURL","API","create","headers","PublicApi","refreshToken","response","post","localStorage","getItem","setItem","data","token","refresh","defaults","common","interceptors","request","use","req","error","status","config","refreshError","Promise","reject"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g/src/api/api.js"],"sourcesContent":["\nimport axios from \"axios\";\n\nconst baseURL = 'http://34.159.231.164/api/';\n\n\nexport const API = axios.create({\n\tbaseURL,\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t}\n});\n\nexport const PublicApi = axios.create({\n\tbaseURL,\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t}\n});\n\nconst refreshToken = async () => {\n    // Make an API call to refresh the token\n    const response = await API.post('auth/refresh', {\n        refreshToken: localStorage.getItem('refresh')\n    });\n\n    // Update the token and refreshToken in local storage\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('refresh', response.data.refresh);\n\n    // Update the authorization header for subsequent requests\n    API.defaults.headers.common['Authorization'] = 'Bearer ' + response.data.token;\n\n    // Return the refreshed token\n    return response.data.token;\n};\n\nAPI.interceptors.request.use(\n    req => {\n        req.headers['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n        return req;\n    }\n);\n\nAPI.interceptors.request.use(\n    async req => {\n        req.headers['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n        return req;\n    },\n    async error => {\n        // Check if the error response has a status code of 403 (Unauthorized)\n        if (error.response && error.response.status === 403) {\n            try {\n                // Call the refreshToken function to refresh the token\n                const token = await refreshToken();\n                // Update the authorization header with the refreshed token\n                error.config.headers['Authorization'] = 'Bearer ' + token;\n                // Retry the original request\n                return axios.request(error.config);\n            } catch (refreshError) {\n                // If the refreshToken function fails, you can handle the error here\n                // For example, you can redirect to a login page or show an error message\n                throw refreshError;\n            }\n        }\n        // If the error is not a 403 error, you can handle it as usual\n        return Promise.reject(error);\n    }\n);"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4BAA4B;AAG5C,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BF,OAAO;EACPG,OAAO,EAAE;IACR,cAAc,EAAE;EACjB;AACD,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGL,KAAK,CAACG,MAAM,CAAC;EACrCF,OAAO;EACPG,OAAO,EAAE;IACR,cAAc,EAAE;EACjB;AACD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAG,YAAY;EAC7B;EACA,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,cAAc,EAAE;IAC5CF,YAAY,EAAEG,YAAY,CAACC,OAAO,CAAC,SAAS;EAChD,CAAC,CAAC;;EAEF;EACAD,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC;EAClDJ,YAAY,CAACE,OAAO,CAAC,SAAS,EAAEJ,QAAQ,CAACK,IAAI,CAACE,OAAO,CAAC;;EAEtD;EACAZ,GAAG,CAACa,QAAQ,CAACX,OAAO,CAACY,MAAM,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGT,QAAQ,CAACK,IAAI,CAACC,KAAK;;EAE9E;EACA,OAAON,QAAQ,CAACK,IAAI,CAACC,KAAK;AAC9B,CAAC;AAEDX,GAAG,CAACe,YAAY,CAACC,OAAO,CAACC,GAAG,CACxBC,GAAG,IAAI;EACHA,GAAG,CAAChB,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxE,OAAOU,GAAG;AACd,CAAC,CACJ;AAEDlB,GAAG,CAACe,YAAY,CAACC,OAAO,CAACC,GAAG,CACxB,MAAMC,GAAG,IAAI;EACTA,GAAG,CAAChB,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxE,OAAOU,GAAG;AACd,CAAC,EACD,MAAMC,KAAK,IAAI;EACX;EACA,IAAIA,KAAK,CAACd,QAAQ,IAAIc,KAAK,CAACd,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;IACjD,IAAI;MACA;MACA,MAAMT,KAAK,GAAG,MAAMP,YAAY,EAAE;MAClC;MACAe,KAAK,CAACE,MAAM,CAACnB,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGS,KAAK;MACzD;MACA,OAAOb,KAAK,CAACkB,OAAO,CAACG,KAAK,CAACE,MAAM,CAAC;IACtC,CAAC,CAAC,OAAOC,YAAY,EAAE;MACnB;MACA;MACA,MAAMA,YAAY;IACtB;EACJ;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC;AAChC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}