{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { deleteUserById, fetchAllUsers, updateUserById } from \"../../api/user\";\nconst FetchUsersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    users: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAllUsers.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllUsers.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.users = action.payload;\n    }).addCase(fetchAllUsers.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deleteUserById.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(deleteUserById.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.users = state.users.filter(user => user.id !== action.payload);\n    }).addCase(deleteUserById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message;\n    }).addCase(updateUserById.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateUserById.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const updatedUserIndex = state.users.findIndex(user => user.id === action.payload.id);\n      if (updatedUserIndex !== -1) {\n        state.users[updatedUserIndex] = action.payload;\n      }\n    }).addCase(updateUserById.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {} = FetchUsersSlice.actions;\nexport default FetchUsersSlice;","map":{"version":3,"names":["createSlice","deleteUserById","fetchAllUsers","updateUserById","FetchUsersSlice","name","initialState","users","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","isLoading","filter","user","id","updatedUserIndex","findIndex","actions"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g/src/redux/slices/FetchUsersSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { deleteUserById, fetchAllUsers, updateUserById } from \"../../api/user\";\n\nconst FetchUsersSlice = createSlice({\n    name: 'users',\n    initialState: {\n      users: [],\n      status: 'idle',\n      error: null,\n    },\n    reducers: {},\n    extraReducers: (builder) => {\n      builder\n        .addCase(fetchAllUsers.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(fetchAllUsers.fulfilled, (state, action) => {\n          state.status = 'succeeded';\n          state.users = action.payload;\n        })\n        .addCase(fetchAllUsers.rejected, (state, action) => {\n          state.status = 'failed';\n          state.error = action.error.message;\n        })\n        .addCase(deleteUserById.pending, (state) => {\n          state.isLoading = true;\n          state.error = null;\n        })\n        .addCase(deleteUserById.fulfilled, (state, action) => {\n          state.isLoading = false;\n          state.users = state.users.filter((user) => user.id !== action.payload);\n        })\n        .addCase(deleteUserById.rejected, (state, action) => {\n          state.isLoading = false;\n          state.error = action.error.message;\n        })\n        .addCase(updateUserById.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(updateUserById.fulfilled, (state, action) => {\n          state.status = 'succeeded';\n          const updatedUserIndex = state.users.findIndex(user => user.id === action.payload.id);\n          if (updatedUserIndex !== -1) {\n            state.users[updatedUserIndex] = action.payload;\n          }\n        })\n        .addCase(updateUserById.rejected, (state, action) => {\n          state.status = 'failed';\n          state.error = action.error.message;\n        });\n        \n    },\n  });\n  \n  export const {} = FetchUsersSlice.actions;\n\n  export default FetchUsersSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,EAAEC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAE9E,MAAMC,eAAe,GAAGJ,WAAW,CAAC;EAChCK,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,aAAa,CAACY,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACX,aAAa,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACX,aAAa,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACZ,cAAc,CAACa,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAACM,SAAS,GAAG,IAAI;MACtBN,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDI,OAAO,CAACZ,cAAc,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACM,SAAS,GAAG,KAAK;MACvBN,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACe,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKP,MAAM,CAACC,OAAO,CAAC;IACxE,CAAC,CAAC,CACDL,OAAO,CAACZ,cAAc,CAACkB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACM,SAAS,GAAG,KAAK;MACvBN,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACV,cAAc,CAACW,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACV,cAAc,CAACa,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1B,MAAMiB,gBAAgB,GAAGV,KAAK,CAACR,KAAK,CAACmB,SAAS,CAACH,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKP,MAAM,CAACC,OAAO,CAACM,EAAE,CAAC;MACrF,IAAIC,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC3BV,KAAK,CAACR,KAAK,CAACkB,gBAAgB,CAAC,GAAGR,MAAM,CAACC,OAAO;MAChD;IACF,CAAC,CAAC,CACDL,OAAO,CAACV,cAAc,CAACgB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EAEN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM,CAAC,CAAC,GAAGhB,eAAe,CAACuB,OAAO;AAEzC,eAAevB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}