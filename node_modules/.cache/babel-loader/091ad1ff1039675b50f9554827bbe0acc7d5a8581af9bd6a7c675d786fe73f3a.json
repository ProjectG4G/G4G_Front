{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { API, PublicApi } from \"./api\";\nimport axios from 'axios';\n\n// export const updateUser = createAsyncThunk(\n//   \"user/updateUser\",\n//   async ({ userData }, { rejectWithValue }) => {\n//     try {\n//       const userID = localStorage.getItem(\"userID\");\n//       const formData = new FormData();\n//       formData.append(\"first_name\", userData.first_name);\n//       formData.append(\"last_name\", userData.last_name);\n//       formData.append(\"email\", userData.email);\n//       formData.append(\"old_password\", userData.oldPassword);\n//       formData.append(\"new_password\", userData.password);\n//       formData.append(\"profile_picture\", userData.profile_picture); // Add user photo data\n\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Replace \"token\" with the key for your token in localStorage\n//           \"Content-Type\": \"multipart/form-data\", // Set the Content-Type header for FormData\n//         },\n//       };\n\n//       const response = await API.patch(`auth/users/${userID}/`, formData,config);\n//       localStorage.setItem('user', JSON.stringify(response.data));\n\n//       console.log(response.data);\n//       window.location.reload()\n\n//       return response.data;\n//     } catch (error) {\n//       return rejectWithValue(error.response.data);\n//     }\n//   }\n// );\n// export const updateUserById = createAsyncThunk('users/updateUserById', async ({ userId, userData }) => {\n//   try {\n\n//     const formData = new FormData();\n//     formData.append(\"first_name\", userData.first_name);\n//     formData.append(\"last_name\", userData.last_name);\n//     formData.append(\"email\", userData.email);\n//     formData.append(\"old_password\", userData.oldPassword);\n//     formData.append(\"new_password\", userData.password);\n//     formData.append(\"profile_picture\", userData.profile_picture);\n\n//     const config = {\n//       headers: {\n\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     };\n\n//     const response = await API.patch(`auth/users/${userId}`, userData,config);\n//     console.log(response.data);\n\n//     return response.data;\n//   } catch (error) {\n//     throw Error('Failed to update user');\n//   }\n// });\n\nexport const updateUserById = createAsyncThunk('users/updateUserById', async _ref => {\n  let {\n    userId,\n    userData\n  } = _ref;\n  const response = await API.put(`auth/users/${userId}`, userData); // Replace this with your API endpoint for updating a user by ID\n  return response.data;\n});\nexport const fetchAllUsers = createAsyncThunk('users/fetchAll', async () => {\n  const response = await API.get('auth/users');\n  return response.data;\n});\nexport const deleteUserById = createAsyncThunk('users/deleteById', async userId => {\n  await API.delete(`auth/users/${userId}`);\n  return userId;\n});\nconst config = {\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n    // Replace \"token\" with the key for your token in localStorage\n    \"Content-Type\": \"multipart/form-data\" // Set the Content-Type header for FormData\n  }\n};","map":{"version":3,"names":["createAsyncThunk","API","PublicApi","axios","updateUserById","userId","userData","response","put","data","fetchAllUsers","get","deleteUserById","delete","config","headers","Authorization","localStorage","getItem"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g/src/api/user.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { API, PublicApi } from \"./api\";\n\nimport axios from 'axios';\n\n\n\n\n// export const updateUser = createAsyncThunk(\n//   \"user/updateUser\",\n//   async ({ userData }, { rejectWithValue }) => {\n//     try {\n//       const userID = localStorage.getItem(\"userID\");\n//       const formData = new FormData();\n//       formData.append(\"first_name\", userData.first_name);\n//       formData.append(\"last_name\", userData.last_name);\n//       formData.append(\"email\", userData.email);\n//       formData.append(\"old_password\", userData.oldPassword);\n//       formData.append(\"new_password\", userData.password);\n//       formData.append(\"profile_picture\", userData.profile_picture); // Add user photo data\n\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Replace \"token\" with the key for your token in localStorage\n//           \"Content-Type\": \"multipart/form-data\", // Set the Content-Type header for FormData\n//         },\n//       };\n\n//       const response = await API.patch(`auth/users/${userID}/`, formData,config);\n//       localStorage.setItem('user', JSON.stringify(response.data));\n\n//       console.log(response.data);\n//       window.location.reload()\n\n//       return response.data;\n//     } catch (error) {\n//       return rejectWithValue(error.response.data);\n//     }\n//   }\n// );\n// export const updateUserById = createAsyncThunk('users/updateUserById', async ({ userId, userData }) => {\n//   try {\n\n//     const formData = new FormData();\n//     formData.append(\"first_name\", userData.first_name);\n//     formData.append(\"last_name\", userData.last_name);\n//     formData.append(\"email\", userData.email);\n//     formData.append(\"old_password\", userData.oldPassword);\n//     formData.append(\"new_password\", userData.password);\n//     formData.append(\"profile_picture\", userData.profile_picture);\n\n//     const config = {\n//       headers: {\n     \n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     };\n\n//     const response = await API.patch(`auth/users/${userId}`, userData,config);\n//     console.log(response.data);\n\n//     return response.data;\n//   } catch (error) {\n//     throw Error('Failed to update user');\n//   }\n// });\n\nexport const updateUserById = createAsyncThunk(\n  'users/updateUserById',\n  async ({ userId, userData }) => {\n    const response = await API.put(`auth/users/${userId}`, userData); // Replace this with your API endpoint for updating a user by ID\n    return response.data;\n  }\n);\n\n\nexport const fetchAllUsers = createAsyncThunk('users/fetchAll', async () => {\n  const response = await API.get('auth/users');\n  return response.data;\n});\n\n\nexport const deleteUserById = createAsyncThunk('users/deleteById', async (userId) => {\n  await API.delete(`auth/users/${userId}`);\n  return userId;\n});\n\n\n\nconst config = {\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Replace \"token\" with the key for your token in localStorage\n    \"Content-Type\": \"multipart/form-data\", // Set the Content-Type header for FormData\n  },\n};"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,GAAG,EAAEC,SAAS,QAAQ,OAAO;AAEtC,OAAOC,KAAK,MAAM,OAAO;;AAKzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGJ,gBAAgB,CAC5C,sBAAsB,EACtB,cAAgC;EAAA,IAAzB;IAAEK,MAAM;IAAEC;EAAS,CAAC;EACzB,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAE,cAAaH,MAAO,EAAC,EAAEC,QAAQ,CAAC,CAAC,CAAC;EAClE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC,CACF;AAGD,OAAO,MAAMC,aAAa,GAAGV,gBAAgB,CAAC,gBAAgB,EAAE,YAAY;EAC1E,MAAMO,QAAQ,GAAG,MAAMN,GAAG,CAACU,GAAG,CAAC,YAAY,CAAC;EAC5C,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC,CAAC;AAGF,OAAO,MAAMG,cAAc,GAAGZ,gBAAgB,CAAC,kBAAkB,EAAE,MAAOK,MAAM,IAAK;EACnF,MAAMJ,GAAG,CAACY,MAAM,CAAE,cAAaR,MAAO,EAAC,CAAC;EACxC,OAAOA,MAAM;AACf,CAAC,CAAC;AAIF,MAAMS,MAAM,GAAG;EACbC,OAAO,EAAE;IACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;IAAE;IAC1D,cAAc,EAAE,qBAAqB,CAAE;EACzC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}