{"ast":null,"code":"var _jsxFileName = \"/Users/sabrina_/Documents/prog/G4G-project/g4g-test/src/pages/Register.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { RegisterView } from '../components/RegisterView';\nimport { setLanguage } from '../redux/slices/generalSlice';\nimport { register } from '../api/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Register() {\n  _s();\n  let dispatch = useDispatch();\n  const {\n    language\n  } = useSelector(state => state.general);\n  let navigate = useNavigate();\n  const handleLanguageChange = e => {\n    dispatch(setLanguage(e.target.value));\n  };\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit,\n    watch,\n    getValues\n  } = useForm({\n    mode: \"onChange\"\n  });\n  function handleFormSubmit(data) {\n    console.log('Submit!', data);\n    dispatch(register(data)).then(res => {\n      console.log(res);\n      if (res.meta.requestStatus === \"fulfilled\") {\n        navigate('/');\n      }\n    });\n  }\n  const emailProps = register(\"email\", {\n    required: \"поле обязательно к заполнению\",\n    pattern: {\n      value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: \"напишите правильный email\"\n    }\n  });\n  const passwordProps = register(\"password\", {\n    required: \"поле обязательно к заполнению\",\n    minLength: {\n      value: 8,\n      message: \"8 минимум  символов\"\n    }\n  });\n  const passwordConfirmProps = register(\"passwordСonfirm\", {\n    required: \"поле обязательно к заполнению\",\n    validate: val => {\n      const {\n        password\n      } = getValues();\n      if (watch(\"password\") !== val) {\n        return password === val || \"пароли не совпадают\";\n      }\n    }\n  });\n  const firstNameProps = register(\"first_name\", {\n    required: \"поле обязательно к заполнению\"\n  });\n  const lastNameProps = register(\"last_name\", {\n    required: \"поле обязательно к заполнению\"\n  });\n  const checkBox = register(\"confirm\", {\n    required: true\n  });\n  const districtProps = register(\"district\");\n  const regionProps = register(\"region\", {\n    required: true\n  });\n  return /*#__PURE__*/_jsxDEV(RegisterView, {\n    onFormSubmit: handleSubmit(handleFormSubmit),\n    emailProps: emailProps,\n    checkBox: checkBox,\n    passwordProps: passwordProps,\n    errors: errors,\n    passwordConfirmProps: passwordConfirmProps,\n    firstNameProps: firstNameProps,\n    lastNameProps: lastNameProps,\n    handleLanguageChange: handleLanguageChange,\n    isValid: isValid,\n    regionProps: regionProps,\n    districtProps: districtProps,\n    language: language\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(Register, \"vaomzqvFB9PqkgOLy9h0Cpi2NQc=\", false, function () {\n  return [useDispatch, useSelector, useNavigate, useForm];\n});\n_c = Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","useForm","useDispatch","useSelector","useNavigate","RegisterView","setLanguage","register","Register","dispatch","language","state","general","navigate","handleLanguageChange","e","target","value","formState","errors","isValid","handleSubmit","watch","getValues","mode","handleFormSubmit","data","console","log","then","res","meta","requestStatus","emailProps","required","pattern","message","passwordProps","minLength","passwordConfirmProps","validate","val","password","firstNameProps","lastNameProps","checkBox","districtProps","regionProps"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g-test/src/pages/Register.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { RegisterView } from '../components/RegisterView';\nimport { setLanguage } from '../redux/slices/generalSlice';\nimport { register } from '../api/auth';\nexport function Register() {\n    let dispatch = useDispatch()\n    const { language } = useSelector(state => state.general);\n    let navigate = useNavigate()\n\n    const handleLanguageChange = e => {\n        dispatch(setLanguage(e.target.value));\n    }\n    const {\n        register,\n        formState: { errors, isValid },\n        handleSubmit,\n        watch,\n        getValues,\n    } = useForm({mode: \"onChange\"});\n    \n\n\n    function handleFormSubmit(data) {\n        console.log('Submit!',data);\n        dispatch(register(data)).then((res)=> {\n            console.log(res)\n            if(res.meta.requestStatus === \"fulfilled\"){\n                navigate('/')\n            }\n        })\n    }\n\n    const emailProps = register(\"email\", {\n        required: \"поле обязательно к заполнению\",\n        pattern: {\n            value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: \"напишите правильный email\",\n        }\n    });\n\n    const passwordProps = register(\"password\", {\n        required: \"поле обязательно к заполнению\",\n        minLength: {\n            value: 8,\n            message: \"8 минимум  символов\",\n        }\n    });\n    const passwordConfirmProps = register(\"passwordСonfirm\", {\n        required: \"поле обязательно к заполнению\",\n        validate: (val) => {\n            const { password } = getValues();\n            if (watch(\"password\") !== val) {\n                return (\n                    password === val || \"пароли не совпадают\"\n                );\n            }\n        },\n    })\n    const firstNameProps =    register(\"first_name\", {\n        required: \"поле обязательно к заполнению\",\n    })\n    const lastNameProps =    register(\"last_name\", {\n        required: \"поле обязательно к заполнению\",\n    })\n    const checkBox = register(\"confirm\", {\n        required: true,\n    })\n    const districtProps =  register(\"district\")\n    const regionProps =   register(\"region\", { required: true })\n\n    \n\n    return (\n        <RegisterView \n            onFormSubmit={handleSubmit(handleFormSubmit)}\n            emailProps={emailProps}\n            checkBox={checkBox}\n            passwordProps={passwordProps}\n            errors={errors}\n            passwordConfirmProps={passwordConfirmProps}\n            firstNameProps={firstNameProps}\n            lastNameProps = {lastNameProps}\n            handleLanguageChange={handleLanguageChange}\n            isValid={isValid}\n            regionProps={regionProps}\n            districtProps={districtProps}\n            language={language}/>\n            \n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}