{"ast":null,"code":"// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { setMessage } from \"./messageSlice.js\";\n// import axios from 'axios';\n\n// import AuthService from \"../auth/authServices\";\n\n// const user = JSON.parse(localStorage.getItem(\"user\"));\n\n// export const signupUser = createAsyncThunk(\n//   \"auth/register\",\n//   async ({ password2, email, password, first_name, last_name, phone_number = \"\", region, district }, thunkAPI) => {\n//     try {\n//       const response = await axios.post(\"http://34.159.231.164/api/auth/register/\", {\n//         password2,\n//         email,\n//         password,\n//         first_name,\n//         last_name,\n//         phone_number,\n//         region,\n//         district\n//       }, {\n//         headers: {\n//           Accept: \"application/json\",\n//           \"Content-Type\": \"application/json\"\n//         }\n//       });\n\n//       let data = response.data;\n//       console.log(\"data\", data)\n\n//       if (response.status === 200) {\n//         localStorage.setItem(\"token\", data.token)\n//         return { ...data }\n//       } else {\n//         console.log(response)\n//         return thunkAPI.rejectWithValue(data)\n//       }\n//     } catch (error) {\n//       console.log(\"Error\", error.response.data)\n//       return thunkAPI.rejectWithValue(error.response.data)\n//     }\n//   }\n// );\n// export const signupUser = createAsyncThunk(\n//     \"auth/register\",\n//     async (form, thunkAPI) => {\n//       try {\n//         const response = await AuthService.register(form);\n//         thunkAPI.dispatch(setMessage(response.data.message));\n//         console.log(response.data);\n//         return response.data;\n//       } catch (error) {\n//         const message =\n//           (error.response &&\n//             error.response.data &&\n//             error.response.data.message) ||\n//           error.message ||\n//           error.toString();\n//         thunkAPI.dispatch(setMessage(message));\n//         return thunkAPI.rejectWithValue();\n//       }\n//     }\n//   );\n\n// export const register = createAsyncThunk(\n//   \"auth/register\",\n//   async ({ password2, email, password,first_name,last_name,phone_number = \"\",region, district, }, thunkAPI) => {\n//     try {\n//       const response = await AuthService.register(password2, email, password,first_name,last_name,phone_number = \"\",region, district, );\n//       thunkAPI.dispatch(setMessage(response.data.message));\n//       console.log(response.data)\n//       return response.data;\n//     } catch (error) {\n//       const message =\n//         (error.response &&\n//           error.response.data &&\n//           error.response.data.message) ||\n//         error.message ||\n//         error.toString();\n//       thunkAPI.dispatch(setMessage(message));\n//       return thunkAPI.rejectWithValue();\n//     }\n//   }\n// );\n\n// export const login = createAsyncThunk(\n//     \"auth/login\",\n//     async ({ email, password }, thunkAPI) => {\n//       try {\n//         const data = await AuthService.login(email, password);\n//         return { user: data };\n//       } catch (error) {\n//         const message =\n//           (error.response &&\n//             error.response.data &&\n//             error.response.data.message) ||\n//           error.message ||\n//           error.toString();\n//         thunkAPI.dispatch(setMessage(message));\n//         return thunkAPI.rejectWithValue();\n//       }\n//     }\n//   );\n\n//   export const logout = createAsyncThunk(\"auth/logout\", async () => {\n//     await AuthService.logout();\n//   });\n\n//   const initialState = user\n//   ? { isLoggedIn: true, user }\n//   : { isLoggedIn: false, user: null };\n\n//   const authSlice = createSlice({\n//     name: \"auth\",\n//     initialState,\n//     extraReducers: {\n//       [signupUser.fulfilled]: (state, action) => {\n//         state.isLoggedIn = false;\n//       },\n//       [signupUser.rejected]: (state, action) => {\n//         state.isLoggedIn = false;\n//       },\n//       [login.fulfilled]: (state, action) => {\n//         state.isLoggedIn = true;\n//         state.user = action.payload.user;\n//       },\n//       [login.rejected]: (state, action) => {\n//         state.isLoggedIn = false;\n//         state.user = null;\n//       },\n//       [logout.fulfilled]: (state, action) => {\n//         state.isLoggedIn = false;\n//         state.user = null;\n//       },\n//     },\n//   });\n\n//   const { reducer } = authSlice;\n//   export default reducer;","map":{"version":3,"names":[],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g/src/features/auth/authSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { setMessage } from \"./messageSlice.js\";\n// import axios from 'axios';\n\n// import AuthService from \"../auth/authServices\";\n\n// const user = JSON.parse(localStorage.getItem(\"user\"));\n\n\n\n\n// export const signupUser = createAsyncThunk(\n//   \"auth/register\",\n//   async ({ password2, email, password, first_name, last_name, phone_number = \"\", region, district }, thunkAPI) => {\n//     try {\n//       const response = await axios.post(\"http://34.159.231.164/api/auth/register/\", {\n//         password2,\n//         email,\n//         password,\n//         first_name,\n//         last_name,\n//         phone_number,\n//         region,\n//         district\n//       }, {\n//         headers: {\n//           Accept: \"application/json\",\n//           \"Content-Type\": \"application/json\"\n//         }\n//       });\n      \n//       let data = response.data;\n//       console.log(\"data\", data)\n      \n//       if (response.status === 200) {\n//         localStorage.setItem(\"token\", data.token)\n//         return { ...data }\n//       } else {\n//         console.log(response)\n//         return thunkAPI.rejectWithValue(data)\n//       }\n//     } catch (error) {\n//       console.log(\"Error\", error.response.data)\n//       return thunkAPI.rejectWithValue(error.response.data)\n//     }\n//   }\n// );\n// export const signupUser = createAsyncThunk(\n//     \"auth/register\",\n//     async (form, thunkAPI) => {\n//       try {\n//         const response = await AuthService.register(form);\n//         thunkAPI.dispatch(setMessage(response.data.message));\n//         console.log(response.data);\n//         return response.data;\n//       } catch (error) {\n//         const message =\n//           (error.response &&\n//             error.response.data &&\n//             error.response.data.message) ||\n//           error.message ||\n//           error.toString();\n//         thunkAPI.dispatch(setMessage(message));\n//         return thunkAPI.rejectWithValue();\n//       }\n//     }\n//   );\n  \n\n\n// export const register = createAsyncThunk(\n//   \"auth/register\",\n//   async ({ password2, email, password,first_name,last_name,phone_number = \"\",region, district, }, thunkAPI) => {\n//     try {\n//       const response = await AuthService.register(password2, email, password,first_name,last_name,phone_number = \"\",region, district, );\n//       thunkAPI.dispatch(setMessage(response.data.message));\n//       console.log(response.data)\n//       return response.data;\n//     } catch (error) {\n//       const message =\n//         (error.response &&\n//           error.response.data &&\n//           error.response.data.message) ||\n//         error.message ||\n//         error.toString();\n//       thunkAPI.dispatch(setMessage(message));\n//       return thunkAPI.rejectWithValue();\n//     }\n//   }\n// );\n\n\n// export const login = createAsyncThunk(\n//     \"auth/login\",\n//     async ({ email, password }, thunkAPI) => {\n//       try {\n//         const data = await AuthService.login(email, password);\n//         return { user: data };\n//       } catch (error) {\n//         const message =\n//           (error.response &&\n//             error.response.data &&\n//             error.response.data.message) ||\n//           error.message ||\n//           error.toString();\n//         thunkAPI.dispatch(setMessage(message));\n//         return thunkAPI.rejectWithValue();\n//       }\n//     }\n//   );\n\n//   export const logout = createAsyncThunk(\"auth/logout\", async () => {\n//     await AuthService.logout();\n//   });\n\n//   const initialState = user\n//   ? { isLoggedIn: true, user }\n//   : { isLoggedIn: false, user: null };\n\n\n//   const authSlice = createSlice({\n//     name: \"auth\",\n//     initialState,\n//     extraReducers: {\n//       [signupUser.fulfilled]: (state, action) => {\n//         state.isLoggedIn = false;\n//       },\n//       [signupUser.rejected]: (state, action) => {\n//         state.isLoggedIn = false;\n//       },\n//       [login.fulfilled]: (state, action) => {\n//         state.isLoggedIn = true;\n//         state.user = action.payload.user;\n//       },\n//       [login.rejected]: (state, action) => {\n//         state.isLoggedIn = false;\n//         state.user = null;\n//       },\n//       [logout.fulfilled]: (state, action) => {\n//         state.isLoggedIn = false;\n//         state.user = null;\n//       },\n//     },\n//   });\n  \n//   const { reducer } = authSlice;\n//   export default reducer;"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}