{"ast":null,"code":"var _jsxFileName = \"/Users/sabrina_/Documents/prog/G4G-project/g4g-test/src/pages/Register.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { RegisterView } from '../components/RegisterView';\nimport { setLanguage } from '../redux/slices/generalSlice';\nimport { register as registerNewUser } from '../api/auth';\nimport { setRegister } from '../adapter/auth';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Register() {\n  _s();\n  let dispatch = useDispatch();\n  const {\n    language\n  } = useSelector(state => state.general);\n  let navigate = useNavigate();\n  const handleLanguageChange = e => {\n    dispatch(setLanguage(e.target.value));\n  };\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit,\n    watch,\n    getValues\n  } = useForm({\n    mode: \"onChange\"\n  });\n  function handleFormSubmit(data) {\n    const cb = validForm => {\n      dispatch(registerNewUser(validForm)).then(res => {\n        console.log(res.meta.requestStatus);\n        if (res.meta.requestStatus === 'fulfilled') {\n          toast.success('Registration successful!', {\n            autoClose: 5000,\n            onClose: () => {\n              navigate('/login');\n            }\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n        toast.error('Registration failed. Please try again later.');\n      });\n    };\n    setRegister(cb, data);\n  }\n  const emailProps = register(\"email\", {\n    required: \"поле обязательно к заполнению\",\n    pattern: {\n      value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: \"напишите правильный email\"\n    }\n  });\n  const passwordProps = register(\"password\", {\n    required: \"поле обязательно к заполнению\",\n    minLength: {\n      value: 8,\n      message: \"8 минимум  символов\"\n    }\n  });\n  const passwordConfirmProps = register(\"passwordСonfirm\", {\n    required: \"поле обязательно к заполнению\",\n    validate: val => {\n      const {\n        password\n      } = getValues();\n      if (watch(\"password\") !== val) {\n        return password === val || \"пароли не совпадают\";\n      }\n    }\n  });\n  const firstNameProps = register(\"first_name\", {\n    required: \"поле обязательно к заполнению\"\n  });\n  const lastNameProps = register(\"last_name\", {\n    required: \"поле обязательно к заполнению\"\n  });\n  const checkBox = register(\"confirm\", {\n    required: true\n  });\n  const districtProps = register(\"district\");\n  const regionProps = register(\"region\", {\n    required: true\n  });\n  return /*#__PURE__*/_jsxDEV(RegisterView, {\n    onFormSubmit: handleSubmit(handleFormSubmit),\n    emailProps: emailProps,\n    checkBox: checkBox,\n    passwordProps: passwordProps,\n    errors: errors,\n    passwordConfirmProps: passwordConfirmProps,\n    firstNameProps: firstNameProps,\n    lastNameProps: lastNameProps,\n    handleLanguageChange: handleLanguageChange,\n    isValid: isValid,\n    regionProps: regionProps,\n    districtProps: districtProps,\n    language: language\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n_s(Register, \"vaomzqvFB9PqkgOLy9h0Cpi2NQc=\", false, function () {\n  return [useDispatch, useSelector, useNavigate, useForm];\n});\n_c = Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","useForm","useDispatch","useSelector","useNavigate","RegisterView","setLanguage","register","registerNewUser","setRegister","ToastContainer","toast","Register","dispatch","language","state","general","navigate","handleLanguageChange","e","target","value","formState","errors","isValid","handleSubmit","watch","getValues","mode","handleFormSubmit","data","cb","validForm","then","res","console","log","meta","requestStatus","success","autoClose","onClose","catch","error","emailProps","required","pattern","message","passwordProps","minLength","passwordConfirmProps","validate","val","password","firstNameProps","lastNameProps","checkBox","districtProps","regionProps"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g-test/src/pages/Register.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { RegisterView } from '../components/RegisterView';\nimport { setLanguage } from '../redux/slices/generalSlice';\nimport { register as registerNewUser } from '../api/auth';\nimport { setRegister } from '../adapter/auth';\nimport {ToastContainer,toast } from \"react-toastify\";\n\nexport function Register() {\n    let dispatch = useDispatch()\n    const { language } = useSelector(state => state.general);\n    let navigate = useNavigate()\n\n    const handleLanguageChange = e => {\n        dispatch(setLanguage(e.target.value));\n    }\n    const {\n        register,\n        formState: { errors, isValid },\n        handleSubmit,\n        watch,\n        getValues,\n    } = useForm({mode: \"onChange\"});\n    \n\n\n    function handleFormSubmit(data) {\n        const cb = (validForm) => {\n            dispatch(registerNewUser(validForm))\n              .then((res) => {\n                console.log(res.meta.requestStatus);\n                if (res.meta.requestStatus === 'fulfilled') {\n                  toast.success('Registration successful!', {\n                    autoClose: 5000, \n                    onClose: () => {\n                      navigate('/login');\n                    },\n                  });\n                }\n              })\n              .catch((error) => {\n                console.log(error);\n                toast.error('Registration failed. Please try again later.');\n              });\n          };\n        setRegister(cb, data);\n    }\n\n    const emailProps = register(\"email\", {\n        required: \"поле обязательно к заполнению\",\n        pattern: {\n            value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: \"напишите правильный email\",\n        }\n    });\n\n    const passwordProps = register(\"password\", {\n        required: \"поле обязательно к заполнению\",\n        minLength: {\n            value: 8,\n            message: \"8 минимум  символов\",\n        }\n    });\n    const passwordConfirmProps = register(\"passwordСonfirm\", {\n        required: \"поле обязательно к заполнению\",\n        validate: (val) => {\n            const { password } = getValues();\n            if (watch(\"password\") !== val) {\n                return (\n                    password === val || \"пароли не совпадают\"\n                );\n            }\n        },\n    })\n    const firstNameProps =    register(\"first_name\", {\n        required: \"поле обязательно к заполнению\",\n    })\n    const lastNameProps =    register(\"last_name\", {\n        required: \"поле обязательно к заполнению\",\n    })\n    const checkBox = register(\"confirm\", {\n        required: true,\n    })\n    const districtProps =  register(\"district\")\n    const regionProps =   register(\"region\", { required: true })\n\n    \n\n    return (\n        <RegisterView \n            onFormSubmit={handleSubmit(handleFormSubmit)}\n            emailProps={emailProps}\n            checkBox={checkBox}\n            passwordProps={passwordProps}\n            errors={errors}\n            passwordConfirmProps={passwordConfirmProps}\n            firstNameProps={firstNameProps}\n            lastNameProps = {lastNameProps}\n            handleLanguageChange={handleLanguageChange}\n            isValid={isValid}\n            regionProps={regionProps}\n            districtProps={districtProps}\n            language={language}/>\n            \n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}