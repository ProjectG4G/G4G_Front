{"ast":null,"code":"var _jsxFileName = \"/Users/sabrina_/Documents/prog/G4G-project/g4g/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport './App.css';\nimport { Route, Routes, useNavigate, useParams } from 'react-router-dom';\nimport Main from './pages/Main.jsx';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOGGED_ROUTES, UNLOGGED_ROUTES } from './constants/routes';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { PublicApi } from './api/api';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { setNewPassword, validateToken } from './api/auth';\nimport { ResetPassConfirm } from './components/ResetPassConfirm/ResetPassConfirm';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotFound = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: \"Page not found\"\n}, void 0, false);\n_c = NotFound;\nconst ResetPassword = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [tokenChecked, setTokenChecked] = useState('Loading');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const {\n    token\n  } = useParams();\n  useEffect(() => {\n    dispatch(validateToken({\n      token\n    })).unwrap().then(res => {\n      if (res.status === 'OK') {\n        setTokenChecked(true);\n      } else {\n        setTokenChecked(false);\n      }\n    }).catch(() => setTokenChecked(false));\n  }, []);\n  function onResetPassword() {\n    if (password === confirmPassword) {\n      dispatch(setNewPassword({\n        password,\n        token\n      })).unwrap().then(res => {\n        if (res.status === 'OK') {\n          navigate('/login');\n        }\n      });\n    }\n  }\n  if (tokenChecked === 'Loading') {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n  if (tokenChecked === false) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Page doesn't exist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"password\",\n      children: \"New password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"password\",\n      type: \"password\",\n      onChange: _ref => {\n        let {\n          target\n        } = _ref;\n        return setPassword(target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"confirmPassword\",\n      children: \"Confirm password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"confirmPassword\",\n      type: \"password\",\n      onChange: _ref2 => {\n        let {\n          target\n        } = _ref2;\n        return setConfirmPassword(target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onResetPassword,\n      children: \"Reset password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"EeOC0z/SKiNhSfdoZJ0YWT1vnc0=\", false, function () {\n  return [useDispatch, useNavigate, useParams];\n});\n_c2 = ResetPassword;\nfunction App() {\n  _s2();\n  const {\n    isLogged,\n    user\n  } = useSelector(state => state.auth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), isLogged ? LOGGED_ROUTES.map((item, index) => /*#__PURE__*/_jsxDEV(Route, {\n        path: item.path,\n        element: item.element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 46\n      }, this)) : UNLOGGED_ROUTES.map((item, index) => /*#__PURE__*/_jsxDEV(Route, {\n        path: item.path,\n        element: item.element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 48\n      }, this)), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/auth/reset-password/:token\",\n        element: /*#__PURE__*/_jsxDEV(ResetPassConfirm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/*\",\n        element: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"qqNwl2PfqmPffLgA4qvA/x4KsWg=\", false, function () {\n  return [useSelector];\n});\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"NotFound\");\n$RefreshReg$(_c2, \"ResetPassword\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["Route","Routes","useNavigate","useParams","Main","useDispatch","useSelector","LOGGED_ROUTES","UNLOGGED_ROUTES","ToastContainer","PublicApi","useEffect","useState","axios","setNewPassword","validateToken","ResetPassConfirm","NotFound","ResetPassword","dispatch","navigate","tokenChecked","setTokenChecked","password","setPassword","confirmPassword","setConfirmPassword","token","unwrap","then","res","status","catch","onResetPassword","target","value","App","isLogged","user","state","auth","map","item","index","path","element"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g/src/App.js"],"sourcesContent":["import './App.css';\nimport { Route, Routes, useNavigate, useParams } from 'react-router-dom';\nimport Main from './pages/Main.jsx';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOGGED_ROUTES, UNLOGGED_ROUTES } from './constants/routes';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { PublicApi } from './api/api';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { setNewPassword, validateToken } from './api/auth';\nimport { ResetPassConfirm } from './components/ResetPassConfirm/ResetPassConfirm';\n\nconst NotFound = () => (<>Page not found</>);\n\nconst ResetPassword = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [tokenChecked, setTokenChecked] = useState('Loading');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const {token} = useParams();\n  \n  useEffect(() => {\n    dispatch(validateToken({token}))\n    .unwrap()\n    .then((res) => {\n      if (res.status === 'OK') {\n        setTokenChecked(true);\n      }\n      else {\n        setTokenChecked(false);\n      }\n    })\n    .catch(() => setTokenChecked(false));\n  }, []);\n\n  function onResetPassword() {\n    if (password === confirmPassword) {\n      dispatch(setNewPassword({password, token}))\n      .unwrap()\n      .then((res) => {\n        if (res.status === 'OK') {\n          navigate('/login');\n        }\n      })\n    }\n  }\n\n  if (tokenChecked === 'Loading') {\n    return (<h1>Loading...</h1>);\n  }\n  if (tokenChecked === false) {\n    return (<h1>Page doesn't exist</h1>);\n  }\n  return(\n    <div>\n      <label htmlFor='password'>New password</label>\n      <input id=\"password\" type=\"password\" onChange={({target}) => setPassword(target.value)}/> \n      <label htmlFor='confirmPassword'>Confirm password</label>\n      <input id=\"confirmPassword\" type=\"password\" onChange={({target}) => setConfirmPassword(target.value)}/>\n      <button type=\"button\" onClick={onResetPassword}>Reset password</button>\n    </div>\n  );\n}\n\nfunction App() {\n  const { isLogged, user } = useSelector(state => state.auth);\n  return (\n    <div className=\"App\">   \n      <Routes>\n        <Route path='/' element={<Main/>} />\n        {\n          isLogged ?\n          LOGGED_ROUTES.map((item, index) => <Route key={index} path={item.path} element={item.element} />)\n          :\n          UNLOGGED_ROUTES.map((item, index) => <Route key={index} path={item.path} element={item.element} />)\n        }\n        {\n\n        }\n{/* \n        <Route path=\"/auth/reset-password/:token\" element={<ResetPassword />}/>  */}\n         <Route path=\"/auth/reset-password/:token\" element={<ResetPassConfirm />}/> \n\n        <Route path=\"/*\" element={<NotFound />}/>\n      </Routes>\n      <ToastContainer/>\n  </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}