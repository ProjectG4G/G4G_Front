{"ast":null,"code":"var _jsxFileName = \"/Users/sabrina_/Documents/prog/G4G-project/g4g-test/src/pages/Reset.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport { RegisterView } from '../components/RegisterView';\nimport { ResetView } from '../components/ResetEmail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Reset() {\n  _s();\n  const {\n    language\n  } = useSelector(state => state.general);\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit\n  } = useForm({\n    mode: \"onChange\"\n  });\n  function handleFormSubmit() {\n    console.log('Submit!');\n  }\n  const emailProps = register(\"email\", {\n    required: \"поле обязательно к заполнению\",\n    pattern: {\n      value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: \"напишите правильный email\"\n    }\n  });\n  const passwordProps = register(\"password\", {\n    required: \"поле обязательно к заполнению\",\n    minLength: {\n      value: 8,\n      message: \"8 минимум  символов\"\n    }\n  });\n  const passwordConfirmProps = register(\"passwordСonfirm\", {\n    required: \"поле обязательно к заполнению\",\n    validate: val => {\n      const {\n        password\n      } = getValues();\n      if (watch(\"password\") !== val) {\n        return password === val || \"пароли не совпадают\";\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ResetView, {\n    onFormSubmit: handleSubmit(handleFormSubmit),\n    emailProps: emailProps,\n    passwordProps: passwordProps,\n    errors: errors,\n    passwordConfirmProps: passwordConfirmProps,\n    isValid: isValid,\n    language: language\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Reset, \"6K3VMs/I3ISZgi7UDtOu75dFz7c=\", false, function () {\n  return [useSelector, useForm];\n});\n_c = Reset;\nvar _c;\n$RefreshReg$(_c, \"Reset\");","map":{"version":3,"names":["useState","useForm","useSelector","RegisterView","ResetView","Reset","language","state","general","register","formState","errors","isValid","handleSubmit","mode","handleFormSubmit","console","log","emailProps","required","pattern","value","message","passwordProps","minLength","passwordConfirmProps","validate","val","password","getValues","watch"],"sources":["/Users/sabrina_/Documents/prog/G4G-project/g4g-test/src/pages/Reset.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport { RegisterView } from '../components/RegisterView';\nimport { ResetView } from '../components/ResetEmail';\n\nexport function Reset() {\n    const { language } = useSelector(state => state.general);\n    const {\n        register,\n        formState: { errors, isValid },\n        handleSubmit,\n    } = useForm({mode: \"onChange\"});\n    \n\n    function handleFormSubmit() {\n        console.log('Submit!');\n    }\n\n    const emailProps = register(\"email\", {\n        required: \"поле обязательно к заполнению\",\n        pattern: {\n            value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: \"напишите правильный email\",\n        }\n    });\n\n    const passwordProps = register(\"password\", {\n        required: \"поле обязательно к заполнению\",\n        minLength: {\n            value: 8,\n            message: \"8 минимум  символов\",\n        }\n    });\n    const passwordConfirmProps = register(\"passwordСonfirm\", {\n        required: \"поле обязательно к заполнению\",\n        validate: (val) => {\n            const { password } = getValues();\n            if (watch(\"password\") !== val) {\n                return (\n                    password === val || \"пароли не совпадают\"\n                );\n            }\n        },\n    })\n\n\n    return (\n        <ResetView \n            onFormSubmit={handleSubmit(handleFormSubmit)}\n            emailProps={emailProps}\n            passwordProps={passwordProps}\n            errors={errors}\n            passwordConfirmProps={passwordConfirmProps}\n            isValid={isValid}\n            language={language}/>\n            \n    );\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,SAAS,QAAQ,0BAA0B;AAAC;AAErD,OAAO,SAASC,KAAK,GAAG;EAAA;EACpB,MAAM;IAAEC;EAAS,CAAC,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;EACxD,MAAM;IACFC,QAAQ;IACRC,SAAS,EAAE;MAAEC,MAAM;MAAEC;IAAQ,CAAC;IAC9BC;EACJ,CAAC,GAAGZ,OAAO,CAAC;IAACa,IAAI,EAAE;EAAU,CAAC,CAAC;EAG/B,SAASC,gBAAgB,GAAG;IACxBC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EAC1B;EAEA,MAAMC,UAAU,GAAGT,QAAQ,CAAC,OAAO,EAAE;IACjCU,QAAQ,EAAE,+BAA+B;IACzCC,OAAO,EAAE;MACLC,KAAK,EAAE,sJAAsJ;MAC7JC,OAAO,EAAE;IACb;EACJ,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAGd,QAAQ,CAAC,UAAU,EAAE;IACvCU,QAAQ,EAAE,+BAA+B;IACzCK,SAAS,EAAE;MACPH,KAAK,EAAE,CAAC;MACRC,OAAO,EAAE;IACb;EACJ,CAAC,CAAC;EACF,MAAMG,oBAAoB,GAAGhB,QAAQ,CAAC,iBAAiB,EAAE;IACrDU,QAAQ,EAAE,+BAA+B;IACzCO,QAAQ,EAAGC,GAAG,IAAK;MACf,MAAM;QAAEC;MAAS,CAAC,GAAGC,SAAS,EAAE;MAChC,IAAIC,KAAK,CAAC,UAAU,CAAC,KAAKH,GAAG,EAAE;QAC3B,OACIC,QAAQ,KAAKD,GAAG,IAAI,qBAAqB;MAEjD;IACJ;EACJ,CAAC,CAAC;EAGF,oBACI,QAAC,SAAS;IACN,YAAY,EAAEd,YAAY,CAACE,gBAAgB,CAAE;IAC7C,UAAU,EAAEG,UAAW;IACvB,aAAa,EAAEK,aAAc;IAC7B,MAAM,EAAEZ,MAAO;IACf,oBAAoB,EAAEc,oBAAqB;IAC3C,OAAO,EAAEb,OAAQ;IACjB,QAAQ,EAAEN;EAAS;IAAA;IAAA;IAAA;EAAA,QAAE;AAGjC;AAAC,GApDeD,KAAK;EAAA,QACIH,WAAW,EAK5BD,OAAO;AAAA;AAAA,KANCI,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}